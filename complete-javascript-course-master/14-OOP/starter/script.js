'use strict';

//////////////////////////////////////////////////
//208 Constructor Functions and the new Operator TODOTODOTODOTODOTODOTODO
//////////////////////////////////////////////////

const Person = function (firstName, birthYear) {
  // –°–≤–æ–π—Å—Ç–≤–∞ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
  this.firstName = firstName;
  this.birthYear = birthYear;

  //   Never to this –ø–ª–æ—Ö–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –Ω–µ –¥–µ–ª–∞–π —Ç–∞–∫
  //   this.calcAge = function () {
  //     console.log(2037 - this.birthYear);
  //   };
};

const jonas = new Person('Jonas', 1991);
console.log(jonas);

//  1. New {} is created
// 2. function is called, this = {}
// 3. {} linked to prototype
// 4. function auto return {}

const matilda = new Person('Matilda', 2017);
const jack = new Person('Jack', 1975);
console.log(matilda, jack);

console.log(jack instanceof Person);

Person.hey = function () {
  console.log('hey there üëåüëåüëåüëå');
  console.log(this);
};
Person.hey();

//////////////////////////////////////////////////
//209 Prototypes TODOTODOTODOTODOTODOTODO
//////////////////////////////////////////////////
console.log(Person.prototype);

Person.prototype.calcAge = function () {
  console.log(2037 - this.birthYear);
};

jack.calcAge();
jonas.calcAge();
matilda.calcAge();

console.log(jonas.__proto__);
console.log(jonas.__proto__ === Person.prototype);

console.log(Person.prototype.isPrototypeOf(jonas));
console.log(Person.prototype.isPrototypeOf(matilda));
console.log(Person.prototype.isPrototypeOf(Person));

// .prototypeOfLinkedObjects

Person.prototype.species = 'Homo Sapiens';
console.log(jonas.species, matilda.species);

console.log(jonas.hasOwnProperty('firstName'));
console.log(jonas.hasOwnProperty('spacies'));

//////////////////////////////////////////////////
//211 Prototypal Inheritance on Built In Objects TODOTODOTODOTODOTODOTODO
//////////////////////////////////////////////////
console.log(jonas.__proto__);
// object.prototype (top of prototype chain)
console.log(jonas.__proto__.__proto__);
console.log(jonas.__proto__.__proto__.__proto__);

console.dir(Person.prototype.constructor);

const arr = [
  2, 6, 4, 5, 6, 9, 3, 3, 3, 3, 3, 3, 6, 11, 11, 12, 13, 12, 13, 15, 6, 2, 100,
]; // new Array []
console.log(arr.__proto__);
console.log(arr.__proto__ === Array.prototype);

console.log(arr.__proto__.__proto__);

Array.prototype.unique = function () {
  return [...new Set(this)];
};

console.log(arr.unique());
// –Ω–µ —Å—Ç–æ–∏—Ç —ç—Ç–æ–≥–æ –¥–µ–ª–∞—Ç—å :D

const h1 = document.querySelector('h1');
console.dir(x => x + 1);

//////////////////////////////////////////////////
//212 Coding Challenge #1 TODOTODOTODOTODOTODOTODO
//////////////////////////////////////////////////

const Car = function (make, speed) {
  this.make = make;
  this.speed = speed;
};

Car.prototype.accelerate = function () {
  this.speed += 10;
  console.log(`–ú–∞—à–∏–Ω–∞: ${this.make} —Ç–µ–∫—É—â–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å ${this.speed}`);
};

Car.prototype.brake = function () {
  this.speed = this.speed - 5;
  console.log(`–ú–∞—à–∏–Ω–∞: ${this.make} —Ç–µ–∫—É—â–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å ${this.speed}`);
};

const myCar = new Car('BMW', 120);
console.log(myCar);
myCar.accelerate();
myCar.brake();
myCar.brake();
myCar.accelerate();

const car2 = new Car('Mercedes', 95);
car2.accelerate();
car2.accelerate();
car2.accelerate();
car2.accelerate();
car2.brake();
car2.brake();
car2.brake();
car2.brake();
car2.brake();
car2.brake();
car2.brake();
car2.brake();
car2.brake();
car2.brake();

//////////////////////////////////////////////////
//213 ES6 Classes TODOTODOTODOTODOTODOTODO
//////////////////////////////////////////////////

//  class expression
// const PersonCl = class {};

//  class declaration
class PersonCl {
  constructor(fullName, birtYear) {
    this.fullName = fullName;
    this.birtYear = birtYear;
  }

  // –≤—Å–µ —ç–∫–∑–µ–º–∞–ø–ª—è—Ä—ã –∏–º–µ–Ω –±—É–¥—É—Ç –∏–º–µ—Ç—å —Å–≤–æ–π—Å—Ç–≤–æ –ø—Ä–æ—Ç–æ—Ç–∏–ø–∞
  //  methods will be added to .prototype property
  calcAge() {
    const data = new Date();
    const years = data.getFullYear();
    console.log(years - this.birtYear);
  }

  greet() {
    console.log(`–ü—Ä–∏–≤–µ—Ç ${this.firstName}`);
  }

  get age() {
    const data = new Date();
    const years = data.getFullYear();
    return years - this.birtYear;
  }

  // –∫–∞–∂–¥—ã–π –∞–∑ –∫–æ–≥–¥–∞ –º—ã –ø—ã—Ç–∞–µ–º—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–≤–æ–π—Å—Ç–≤–æ –∫–æ—Ç–æ—Ä—ã–µ —É–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  set fullName(name) {
    console.log(name);
    if (name.includes(' ')) this._fullName = name;
    else alert(`${name} –Ω–µ –ø–æ–ª–Ω–æ–µ –∏–º—è`);
  }

  get fullname() {
    return this._fullName;
  }

  // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ –Ω–∏–∫—Ç–æ –∫—Ä–æ–º–µ –∫–ª–∞—Å—Å–∞ –Ω–µ –±—É–¥—É—Ç –∏–º–µ—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–æ—Ç–æ—Ç–∏–ø—É
  static hey() {
    console.log('hey there üëåüëåüëåüëå');
    console.log(this);
  }
}

const jessica = new PersonCl('Jessica Davis', 1996);
console.log(jessica);
const egor = new PersonCl('Egor', 2000);
console.log(egor);

egor.calcAge();
console.log(jessica.__proto__ === PersonCl.prototype);

// PersonCl.prototype.greet = function () {
//   console.log(`–ü—Ä–∏–≤–µ—Ç ${this.firstName}`);
// };

egor.greet();

//  1. Classes are not hoisted (–Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–∫–∞ –Ω–µ –æ–±—ä—è–≤–∏–ª–∏ —Ç–æ –µ—Å—Ç—å –≤—ã—à–µ –∫–æ–∞)
// 2. Class are first-class citizes –º—ã –º–æ–∂–µ–º –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –∏—Ö –≤ —Ñ—É–Ω–∫—Ü–∏—é –∏ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
// 3. Classes –≤—Å–µ–≥–¥–∞ —Ä–∞–±–æ—Ç–∞—é—Ç –≤ —Å—Ç—Ä–æ–≥–æ–º —Ä–µ–∂–∏–º–µ.
//////////////////////////////////////////////////
//214 Setters and Getters TODOTODOTODOTODOTODOTODO
//////////////////////////////////////////////////

const walter = new PersonCl('Walter White', 1965);

PersonCl.hey();

//////////////////////////////////////////////////
//214 Setters and GettersTODOTODOTODOTODOTODOTODO
//////////////////////////////////////////////////
const account = {
  owner: 'Jonas',
  movements: [200, 530, 120, 300],

  get latest() {
    return this.movements.slice(-1).pop();
  },

  set latest(mov) {
    this.movements.push(mov);
  },
};

console.log(account.latest);

account.latest = 50;
console.log(account);

console.log(egor.age);
//////////////////////////////////////////////////
//215 Static Methods TODOTODOTODOTODOTODOTODO
//////////////////////////////////////////////////
